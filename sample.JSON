{
    "english": {
        "slide0": {
            "slideNumber": "slide-c5ee52091a9e",
            "codingLayer": "components.textDisplay1.updateData({text:\"This text is dynamic\"})",
            "contents": {
                "textDisplay1": {
                    "textDisplay1AriaLabel": "",
                    "componentType": "textbox",
                    "text": "This is a text box"
                },
                "richTextEditor1": {
                    "richTextEditor1AriaLabel": "",
                    "componentType": "richtexteditor",
                    "text": "<p>This is an rte with&nbsp;<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mfrac><mn>1</mn><mn>2</mn></mfrac></math>&nbsp;of a response and a <input aria-label=\"substitute?\" data-type=\"regular\" id=\"input1\" size=\"11\" type=\"text\" />&nbsp;in the blank.</p>\n"
                },
                "select1": {
                    "select1AriaLabel": "",
                    "componentType": "select",
                    "select": {
                        "select0Text": "Cats",
                        "select1Text": "Rats",
                        "select2Text": "Elephants",
                        "select3Text": "Unicorns"
                    }
                },
                "ggb1": {
                    "componentType": "geogebra",
                    "materialId": "gr4savmr",
                    "geoGebraContent": {
                        "ariaLabelForGGB": "Pan Flute",
                        "f3CaptionText": "Third longest stick moves to rearrange the order of the Pan Flute.",
                        "f1CaptionText": "Longest stick moves to rearrange the order of the Pan Flute.",
                        "f4CaptionText": "Fourth longest stick moves to rearrange the order of the Pan Flute.",
                        "f5CaptionText": "Fifth longest stick moves to rearrange the order of the Pan Flute.",
                        "f2CaptionText": "Second longest stick moves to rearrange the order of the Pan Flute.",
                        "f6CaptionText": "Sixth longest stick moves to rearrange the order of the Pan Flute.",
                        "f7CaptionText": "Seventh longest stick moves to rearrange the order of the Pan Flute.",
                        "f8CaptionText": "Shortest stick moves to rearrange the order of the Pan Flute.",
                        "instructionsText": "Text(\"\\text{Press a stick to play it. Use the Play button to play all the sticks. Move the sticks to play them in a new way. Use the Reset button to reset the activity.\\\\\\\\Press x to restart the tab cycle.\\\\\\\\Press k to show keyboard instructions.}\", (0, 0), false, true)",
                        "ggbButton1CaptionText": "Jugar",
                        "AAppletStatus": "\\text{A Pan Flute. The sticks of the Pan Flute are in the following order: third longest stick, second longest stick, seventh longest stick, fourth longest stick, shortest stick, longest stick, sixth longest stick, fifth longest stick.}",
                        "ggbButton2CaptionText": "Reincindar",
                        "globalJSText": "function ggbOnInit(name, ggbObject) {  loadUtils().then(function (setupGGB) {const buttonClicks = defineButtonClickScripts();const {getCanvas,setAriaLabel,readKeyboardInstructions,updateKeyboardInstructions,ggbReadText,enableButton,libClientFunction,libClickFunction,libKeyFunction,registerSafeObjectUpdateListener,registerSafeObjectClickListener,registerHoverListener,unavailableButtonText,setTabOrder,manageAddedList,editXML,isPoly,selectedObject,} = setupGGB({name,ggbObject,defineKeyboardInstructions,buttonClicks,statusName: \"AAppletStatus\",preventCustomFocusIndicators: false,});const ggbcanvas = getCanvas();setAriaLabel(ggbcanvas, \"Pan Flute\");/** IGNORE above* EDIT below*/const stickNames = [\"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\", \"f8\"];const leftRight = [\"left\", \"right\"];const origStickXVals = [6, 2, 1, 4, 8, 7, 3, 5];const panFluteTopY = 10;let shouldPlaySound = true;const minMaxOrigX = [Math.min(...origStickXVals),Math.max(...origStickXVals),];const audioCtx = new AudioContext();let osc = null;let isTonePlaying = false; leftmost points of sticksconst sticks = [{name: \"f1\",point: \"F1Anchor\",val: 0,prevVal: -1,label: \"longest stick\",frequency: 261.63,note: \"lowest\",},{name: \"f2\",point: \"F2Anchor\",val: 1,prevVal: -1,label: \"second longest stick\",frequency: 293.66,note: \"second lowest\",},{name: \"f3\",point: \"F3Anchor\",val: 2,prevVal: -1,label: \"third longest stick\",frequency: 329.63,note: \"third lowest\",},{name: \"f4\",point: \"F4Anchor\",val: 3,prevVal: -1,label: \"fourth longest stick\",frequency: 349.23,note: \"fourth lowest\",},{name: \"f5\",point: \"F5Anchor\",val: 4,prevVal: -1,label: \"fifth longest stick\",frequency: 392.2,note: \"fifth lowest\",},{name: \"f6\",point: \"F6Anchor\",val: 5,prevVal: -1,label: \"sixth longest stick\",frequency: 440,note: \"sixth lowest\",},{name: \"f7\",point: \"F7Anchor\",val: 6,prevVal: -1,label: \"seventh longest stick\",frequency: 493.88,note: \"seventh lowest\",},{name: \"f8\",point: \"F8Anchor\",val: 7,prevVal: -1,label: \"shortest stick\",frequency: 523.25,note: \"highest\",},]; listeners here; keep these, add your own as neededggbObject.registerClientListener(function (clientEvent) {clientFunction(clientEvent);libClientFunction(clientEvent);});ggbObject.registerClickListener(function (clickedName) {clickListenerFunction(clickedName);libClickFunction(clickedName);});ggbcanvas.addEventListener(\"keyup\", function (keyEvent) {keyit(keyEvent);libKeyFunction(keyEvent);});function defineButtonClickScripts() { defines button scripts keep this function, but you can delete anything/everything inside itreturn {ggbButton1() {sortSticks();const notes = getNotes();playFullPanFlute();const timeOut = setTimeout(function () {ggbReadText(\"The sounds made by the Pan Flute are in the following order: \" +notes);}, 2000);},ggbButton2() {stickNames.forEach(function (stick, stickIndex) {ggbObject.setCoords(stick.toUpperCase().concat(\"Anchor\"),origStickXVals[stickIndex],panFluteTopY);});},};}function defineKeyboardInstructions(obj) { takes a GGB object name as an argument, returns its keyboard text.const keyboardInstructions = {f1: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f2: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f3: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f4: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f5: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f6: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f7: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f8: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",ggbButton1: ggbObject.getValue(\"ggbButton1Enabled\")? \"Press space to play music.\": unavailableButtonText,ggbButton2: ggbObject.getValue(\"ggbButton2Enabled\")? \"Press space to reset the position of the sticks.\": unavailableButtonText,};return keyboardInstructions[obj];}function clientFunction(clientEvent) {const { type, target } = clientEvent;switch (type) {case \"select\": {selectedObject.name = target;const { name } = selectedObject;sortSticks();if (stickNames.includes(name)) {const selectedStick = getSelectedStick();setArrowIndicatorsVisibility(name.toUpperCase());const selectedStickIndex = getSelectedStickIndex();shouldPlaySound = true; let text=selectedStick.label+\" moves to rearrange the order of the Pan Flute.\";let text = \"\";const previousStickIndex = selectedStickIndex - 1;const nextStickIndex = selectedStick + 1;switch (true) {case previousStickIndex < 0: {text +=\" The \" +selectedStick.label +\" is in the first spot of the Pan Flute. This stick is as far left as it can go. Press the right arrow key to move this stick.\";break;}case nextStickIndex >= sticks.length: {text +=\" The \" +selectedStick.label +\" is in the last spot of the Pan Flute. This stick is as far right as it can go. Press the left arrow key to move this stick.\";break;}default: {const previousStick=sticks[previousStickIndex];const nextStick=sticks[nextStickIndex];text +=\" The \" +selectedStick.label +\" is between the \" +previousStick.label +\" and the \" +nextStick.label +\". Press the left and right arrow keys to move this stick.\";break;}}text +=\" Press space to hear the sound from the stick. Press space a second time to hear the order of the sticks in the Pan Flute.\";ggbReadText(text);} TODO: Figure out where to update appletStatus = setAppletStatus();break;}case \"dragEnd\": {shouldPlaySound = true;reOrderSticks();readMovementText();break;}case \"movedGeos\": {setArrowIndicatorsVisibility(selectedObject.nameToUpperCase());break;}case \"deselect\": {sortSticks();stickNames.forEach(function (stick) {leftRight.forEach(function (side) {ggbObject.setVisible(stick.toUpperCase().concat(\"_{\", side, \"}\"),false);});});break;}}}function clickListenerFunction(clickedName) { clickedName is a stringif (shouldPlaySound && stickNames.includes(clickedName)) {playSingleFlute(getSelectedStick());}}function keyit(keyEvent) { feel free to delete key or code depending on your preferencesconst { name } = selectedObject;switch (keyEvent.code) {case \"Space\": {if (!stickNames.includes(name)) { not a stick; kick outreturn;}if (shouldPlaySound) {const tempIndex = parseInt(name.slice(1)) - 1;ggbReadText(\"The sound from the stick is the \" +sticks[tempIndex].note +\". Press space again to hear the order of the sticks in the Pan Flute.\");shouldPlaySound = false;} else {shouldPlaySound = true;sortSticks();ggbReadText(getOrderOfSticksText());}break;}case \"ArrowLeft\":case \"ArrowRight\": {shouldPlaySound = true;reOrderSticks();setArrowIndicatorsVisibility(name.toUpperCase());readMovementText();break;}default:break;}}function getSelectedStick() {return sticks.find(function (stick) {return stick.name === selectedObject.name;});}function getSelectedStickIndex() {for (let i = 0; i < sticks.length; i++) {if (sticks[i].name === selectedObject.name) {return i;}}return -1;}function sortSticks() { update valuesconst previousSticks = [...sticks];sticks.forEach(function (stick) {stick.prevVal = { ...stick }.val;stick.val = ggbObject.getXcoord(stick.point);}); sortsticks.sort(function (first, last) {return first.val - last.val;});return previousSticks;}function setAppletStatus() {let appletStatus = \"A Pan Flute. \";appletStatus += getOrderOfSticksText();ggbObject.setTextValue(\"AAppletStatus\", \"\\\\text{\" + appletStatus + \"}\");return appletStatus;}function getOrderOfSticksText() {const text =\"The sticks of the Pan Flute are in the following order: \" +getLabels() +\".\";return text;}function getNotes() {const notes = sticks.map(function (stick) {return stick.note;});return notes.join(\", \");}function getLabels() {const labels = sticks.map(function (stick) {return stick.label;});return labels.join(\", \");}function playFullPanFlute() {if (!isTonePlaying) {playOscFullPanFlute();} else {if (osc) {osc.stop();}playOscFullPanFlute();}}function playOscFullPanFlute() {osc = audioCtx.createOscillator();osc.type = \"sine\";const timeStarted = audioCtx.currentTime;osc.frequency.setValueAtTime(sticks[0].frequency, timeStarted);const envelope = audioCtx.createGain();envelope.connect(audioCtx.destination);envelope.gain.linearRampToValueAtTime(1, timeStarted + 0.1);envelope.gain.linearRampToValueAtTime(0, timeStarted + 2);for (let i = 0, counter = 0; i < sticks.length; i++, counter += 0.25) {const stick = sticks[i];osc.frequency.setValueAtTime(stick.frequency, timeStarted + counter);}osc.connect(envelope);osc.connect(audioCtx.destination);osc.start();osc.stop(timeStarted + 2);isTonePlaying = true;osc.onended = function () {isTonePlaying = false;};}function playSingleFlute(stick) {if (!isTonePlaying) {playOscSingleFlute(stick);} else {if (osc) {osc.stop();}playOscSingleFlute(stick);}}function playOscSingleFlute(stick) {osc = audioCtx.createOscillator();osc.type = \"sine\";const timeStarted = audioCtx.currentTime;osc.frequency.setValueAtTime(stick.frequency, timeStarted);const envelope = audioCtx.createGain();envelope.connect(audioCtx.destination);osc.frequency.setValueAtTime(stick.frequency, timeStarted);osc.connect(envelope);osc.connect(audioCtx.destination);osc.start();osc.stop(timeStarted + 0.25);isTonePlaying = true;osc.onended = function () {isTonePlaying = false;};}function readMovementText() {const selectedStick = getSelectedStick();const selectedStickIndex = getSelectedStickIndex();const previousStickIndex = selectedStickIndex - 1;const nextStickIndex = selectedStickIndex + 1;let text = \"\";if (previousStickIndex < 0) {text +=\" The \" +selectedStick.label +\" is in the first spot of the Pan Flute.\";} else if (nextStickIndex >= sticks.length) {text +=\" The \" +selectedStick.label +\" is in the last spot of the Pan Flute.\";} else {const previousStick=sticks[previousStickIndex];const nextStick=sticks[nextStickIndex];text +=\" The \" +selectedStick.label +\" moved between the \" +previousStick.label +\" and the \" +nextStick.label +\".\";}text +=\" Press space to hear the sound from the stick. Press space a second time to hear the order of the sticks in the Pan Flute.\";ggbReadText(text);}function reOrderSticks() {const previousSticks = sortSticks(); swap sticksconst selectedStick = getSelectedStick();const prevX = selectedStick.prevVal;const currentX = selectedStick.val;const filteredSticks = sticks.filter(function (stick) {return stick !== selectedStick;});const overlappingStick = filteredSticks.find(function (stick) {return stick.val === currentX;});if (overlappingStick !== undefined) {const overlappingStickIndex = filteredSticks.findIndex(function (stick) {return stick === overlappingStick;});const selectedStickIndex = previousSticks.findIndex(function (stick) {return stick.name === selectedStick.name;}); stick moved to the leftif (prevX > currentX) { overlapping stick should move to the rightfor (let i = overlappingStickIndex; i < selectedStickIndex; i++) {const stick = filteredSticks[i];ggbObject.setCoords(stick.point, stick.val + 1, panFluteTopY);}} else {for (let i = selectedStickIndex; i <= overlappingStickIndex; i++) {const stick = filteredSticks[i];ggbObject.setCoords(stick.point, stick.val - 1, panFluteTopY);}}}sortSticks();}function setArrowIndicatorsVisibility(stickUpperCase) {stickNames.forEach(function (stick) {leftRight.forEach(function (side) {ggbObject.setVisible(stick.toUpperCase().concat(\"_{\", side, \"}\"),false);});}); show arrow indicatorsconst anchorPointX = ggbObject.getXcoord(stickUpperCase.concat(\"Anchor\"));leftRight.forEach(function (side, sideIndex) {ggbObject.setVisible(stickUpperCase.concat(\"_{\", side, \"}\"),anchorPointX !== minMaxOrigX[sideIndex]);});} add new stuff above this line  });  /** IGNORE BELOW*/  function loadUtils() {function parseJS(JSString) {return Function(\"\" + JSString)();}if (!window.didUtils || !window.didUtils.setupGGB) {return fetch(\"https:cdn.digital.greatminds.org/did-utils/latest/index.js\",{cache: \"no-cache\",}).then(function (response) {return response.text();}).then(function (codingText) {parseJS(codingText);}).then(function () {return window.didUtils.setupGGB;});}return Promise.resolve(window.didUtils.setupGGB);  }}",
                        "keyboardInstructionsConst": "{f1: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f2: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f3: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f4: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f5: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f6: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f7: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f8: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",ggbButton1: ggbObject.getValue(\"ggbButton1Enabled\")? \"Press space to play music.\": unavailableButtonText,ggbButton2: ggbObject.getValue(\"ggbButton2Enabled\")? \"Press space to reset the position of the sticks.\": unavailableButtonText,}"
                    }
                },
                "buttonGroup1": {
                    "buttonGroup1AriaLabel": "",
                    "componentType": "buttongroup",
                    "buttons": { "button0Text": "Cats", "button1Text": "Dogs" }
                },
                "button1": {
                    "button1AriaLabel": "",
                    "componentType": "button",
                    "text": "Click Here"
                }
            }
        },
        "slide1": {
            "slideNumber": "slide-94fec44d84eb",
            "codingLayer": "console.log(components.table1.data);\r\nconsole.log(components.table2.data);",
            "contents": {
                "categorizing1": {
                    "categorizing1AriaLabel": "",
                    "componentType": "categorization",
                    "items": {
                        "item0Text": "Red",
                        "item1Text": "Blue",
                        "item2Text": "$1$",
                        "item3Text": "$2$"
                    },
                    "categories": {
                        "category0Text": "Fish",
                        "category1Text": "Fifth"
                    }
                },
                "table1": {
                    "table1AriaLabel": "",
                    "componentType": "table",
                    "columns": {
                        "col0Text": "Independent",
                        "col1Text": "Dependent"
                    },
                    "rows": {
                        "row0": { "col0Text": "Age", "col1Text": "Height" },
                        "row1": {
                            "col0Text": "Time Spent Studying",
                            "col1Text": "Grade on Exam"
                        }
                    },
                    "ariaRows": {
                        "row0": {
                            "col0AriaLabel": "Por favor agregue texto",
                            "col1AriaLabel": "Add text here"
                        },
                        "row1": {
                            "col0AriaLabel": "Por favor agregue texto",
                            "col1AriaLabel": "Por favor agregue texto"
                        }
                    }
                },
                "table2": {
                    "table2AriaLabel": "",
                    "componentType": "complextable",
                    "rows": {
                        "row0": {
                            "col0Text": "Complex Independent",
                            "col1Text": "Complex Dependent"
                        },
                        "row1": {
                            "col0Text": "123",
                            "col1Text": "Cats have 9 lives"
                        },
                        "row2": { "col0Text": "14", "col1Text": "Pspspspsps" }
                    },
                    "ariaRows": {
                        "row0": {
                            "col0AriaLabel": "Por favor agregue texto",
                            "col1AriaLabel": "Por favor agregue texto"
                        },
                        "row1": {
                            "col0AriaLabel": "Label this now",
                            "col1AriaLabel": "Por favor agregue texto"
                        },
                        "row2": {
                            "col0AriaLabel": "Por favor agregue texto",
                            "col1AriaLabel": "Por favor agregue texto"
                        }
                    }
                }
            }
        },
        "slide2": {
            "slideNumber": "slide-a6cbda66c1dd",
            "codingLayer": "",
            "contents": {
                "image1": {
                    "image1AriaLabel": "",
                    "componentType": "image",
                    "alt": "Number line alt text",
                    "copyright": "Copyright text is right here",
                    "src": "https://cdn.digital.greatminds.org/bynder/EM2-1694/PNG_Web Ready/9EEF9BE4-972D-45C3-99D27C759D326A1A.png"
                },
                "dropdown1": {
                    "dropdown1AriaLabel": "",
                    "componentType": "dropdown",
                    "dropdown": {
                        "dropdown0Text": "Option text number 1",
                        "dropdown1Text": "Option text number 2"
                    },
                    "label": "Label for the input",
                    "placeholder": "Placeholder text is here"
                }
            }
        },
        "slide3": {
            "slideNumber": "slide-b8ffe83772a4",
            "codingLayer": "console.log(components.pdfviewer1.data)",
            "contents": {
                "pdfviewer1": {
                    "pdfviewer1AriaLabel": "",
                    "componentType": "pdfviewer",
                    "id": 4077
                }
            }
        }
    },
    "spanish": {
        "slide0": {
            "slideNumber": "slide-c5ee52091a9e",
            "codingLayer": "components.textDisplay1.updateData({text:\"Este texto es dinámico.\"})",
            "contents": {
                "textDisplay1": {
                    "textDisplay1AriaLabel": "",
                    "componentType": "textbox",
                    "text": "Este es un cuadro de texto"
                },
                "richTextEditor1": {
                    "richTextEditor1AriaLabel": "",
                    "componentType": "richtexteditor",
                    "text": "<p>Este es un rte con&nbsp;<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mfrac><mn>1</mn><mn>2</mn></mfrac></math>&nbsp;de una respuesta y un <input aria-label=\"sustituto?\" data-type=\"regular\" id=\"input1\" size=\"11\" type=\"text\" />&nbsp;en el espacio en blanco.</p>\n"
                },
                "select1": {
                    "select1AriaLabel": "",
                    "componentType": "select",
                    "select": {
                        "select0Text": "Gatas",
                        "select1Text": "Ratas",
                        "select2Text": "Elefantes",
                        "select3Text": "Unicornios"
                    }
                },
                "ggb1": {
                    "componentType": "geogebra",
                    "materialId": "gr4savmr",
                    "geoGebraContent": {
                        "ariaLabelForGGB": "Pan Flute",
                        "f3CaptionText": "Third longest stick moves to rearrange the order of the Pan Flute.",
                        "f1CaptionText": "Longest stick moves to rearrange the order of the Pan Flute.",
                        "f4CaptionText": "Fourth longest stick moves to rearrange the order of the Pan Flute.",
                        "f5CaptionText": "Fifth longest stick moves to rearrange the order of the Pan Flute.",
                        "f2CaptionText": "Second longest stick moves to rearrange the order of the Pan Flute.",
                        "f6CaptionText": "Sixth longest stick moves to rearrange the order of the Pan Flute.",
                        "f7CaptionText": "Seventh longest stick moves to rearrange the order of the Pan Flute.",
                        "f8CaptionText": "Shortest stick moves to rearrange the order of the Pan Flute.",
                        "instructionsText": "Text(\"\\text{Press a stick to play it. Use the Play button to play all the sticks. Move the sticks to play them in a new way. Use the Reset button to reset the activity.\\\\\\\\Press x to restart the tab cycle.\\\\\\\\Press k to show keyboard instructions.}\", (0, 0), false, true)",
                        "ggbButton1CaptionText": "Jugar",
                        "AAppletStatus": "\\text{A Pan Flute. The sticks of the Pan Flute are in the following order: third longest stick, second longest stick, seventh longest stick, fourth longest stick, shortest stick, longest stick, sixth longest stick, fifth longest stick.}",
                        "ggbButton2CaptionText": "Reincindar",
                        "globalJSText": "function ggbOnInit(name, ggbObject) {  loadUtils().then(function (setupGGB) {const buttonClicks = defineButtonClickScripts();const {getCanvas,setAriaLabel,readKeyboardInstructions,updateKeyboardInstructions,ggbReadText,enableButton,libClientFunction,libClickFunction,libKeyFunction,registerSafeObjectUpdateListener,registerSafeObjectClickListener,registerHoverListener,unavailableButtonText,setTabOrder,manageAddedList,editXML,isPoly,selectedObject,} = setupGGB({name,ggbObject,defineKeyboardInstructions,buttonClicks,statusName: \"AAppletStatus\",preventCustomFocusIndicators: false,});const ggbcanvas = getCanvas();setAriaLabel(ggbcanvas, \"Pan Flute\");/** IGNORE above* EDIT below*/const stickNames = [\"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\", \"f8\"];const leftRight = [\"left\", \"right\"];const origStickXVals = [6, 2, 1, 4, 8, 7, 3, 5];const panFluteTopY = 10;let shouldPlaySound = true;const minMaxOrigX = [Math.min(...origStickXVals),Math.max(...origStickXVals),];const audioCtx = new AudioContext();let osc = null;let isTonePlaying = false; leftmost points of sticksconst sticks = [{name: \"f1\",point: \"F1Anchor\",val: 0,prevVal: -1,label: \"longest stick\",frequency: 261.63,note: \"lowest\",},{name: \"f2\",point: \"F2Anchor\",val: 1,prevVal: -1,label: \"second longest stick\",frequency: 293.66,note: \"second lowest\",},{name: \"f3\",point: \"F3Anchor\",val: 2,prevVal: -1,label: \"third longest stick\",frequency: 329.63,note: \"third lowest\",},{name: \"f4\",point: \"F4Anchor\",val: 3,prevVal: -1,label: \"fourth longest stick\",frequency: 349.23,note: \"fourth lowest\",},{name: \"f5\",point: \"F5Anchor\",val: 4,prevVal: -1,label: \"fifth longest stick\",frequency: 392.2,note: \"fifth lowest\",},{name: \"f6\",point: \"F6Anchor\",val: 5,prevVal: -1,label: \"sixth longest stick\",frequency: 440,note: \"sixth lowest\",},{name: \"f7\",point: \"F7Anchor\",val: 6,prevVal: -1,label: \"seventh longest stick\",frequency: 493.88,note: \"seventh lowest\",},{name: \"f8\",point: \"F8Anchor\",val: 7,prevVal: -1,label: \"shortest stick\",frequency: 523.25,note: \"highest\",},]; listeners here; keep these, add your own as neededggbObject.registerClientListener(function (clientEvent) {clientFunction(clientEvent);libClientFunction(clientEvent);});ggbObject.registerClickListener(function (clickedName) {clickListenerFunction(clickedName);libClickFunction(clickedName);});ggbcanvas.addEventListener(\"keyup\", function (keyEvent) {keyit(keyEvent);libKeyFunction(keyEvent);});function defineButtonClickScripts() { defines button scripts keep this function, but you can delete anything/everything inside itreturn {ggbButton1() {sortSticks();const notes = getNotes();playFullPanFlute();const timeOut = setTimeout(function () {ggbReadText(\"The sounds made by the Pan Flute are in the following order: \" +notes);}, 2000);},ggbButton2() {stickNames.forEach(function (stick, stickIndex) {ggbObject.setCoords(stick.toUpperCase().concat(\"Anchor\"),origStickXVals[stickIndex],panFluteTopY);});},};}function defineKeyboardInstructions(obj) { takes a GGB object name as an argument, returns its keyboard text.const keyboardInstructions = {f1: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f2: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f3: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f4: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f5: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f6: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f7: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f8: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",ggbButton1: ggbObject.getValue(\"ggbButton1Enabled\")? \"Press space to play music.\": unavailableButtonText,ggbButton2: ggbObject.getValue(\"ggbButton2Enabled\")? \"Press space to reset the position of the sticks.\": unavailableButtonText,};return keyboardInstructions[obj];}function clientFunction(clientEvent) {const { type, target } = clientEvent;switch (type) {case \"select\": {selectedObject.name = target;const { name } = selectedObject;sortSticks();if (stickNames.includes(name)) {const selectedStick = getSelectedStick();setArrowIndicatorsVisibility(name.toUpperCase());const selectedStickIndex = getSelectedStickIndex();shouldPlaySound = true; let text=selectedStick.label+\" moves to rearrange the order of the Pan Flute.\";console.log(\"CHANGED IT!\");let text = \"\";const previousStickIndex = selectedStickIndex - 1;const nextStickIndex = selectedStick + 1;switch (true) {case previousStickIndex < 0: {text +=\" The \" +selectedStick.label +\" is in the first spot of the Pan Flute. This stick is as far left as it can go. Press the right arrow key to move this stick.\";break;}case nextStickIndex >= sticks.length: {text +=\" The \" +selectedStick.label +\" is in the last spot of the Pan Flute. This stick is as far right as it can go. Press the left arrow key to move this stick.\";break;}default: {const previousStick=sticks[previousStickIndex];const nextStick=sticks[nextStickIndex];text +=\" The \" +selectedStick.label +\" is between the \" +previousStick.label +\" and the \" +nextStick.label +\". Press the left and right arrow keys to move this stick.\";break;}}text +=\" Press space to hear the sound from the stick. Press space a second time to hear the order of the sticks in the Pan Flute.\";ggbReadText(text);} TODO: Figure out where to update appletStatus = setAppletStatus();break;}case \"dragEnd\": {shouldPlaySound = true;reOrderSticks();readMovementText();break;}case \"movedGeos\": {setArrowIndicatorsVisibility(selectedObject.nameToUpperCase());break;}case \"deselect\": {sortSticks();stickNames.forEach(function (stick) {leftRight.forEach(function (side) {ggbObject.setVisible(stick.toUpperCase().concat(\"_{\", side, \"}\"),false);});});break;}}}function clickListenerFunction(clickedName) { clickedName is a stringif (shouldPlaySound && stickNames.includes(clickedName)) {playSingleFlute(getSelectedStick());}}function keyit(keyEvent) { feel free to delete key or code depending on your preferencesconst { name } = selectedObject;switch (keyEvent.code) {case \"Space\": {if (!stickNames.includes(name)) { not a stick; kick outreturn;}if (shouldPlaySound) {const tempIndex = parseInt(name.slice(1)) - 1;ggbReadText(\"The sound from the stick is the \" +sticks[tempIndex].note +\". Press space again to hear the order of the sticks in the Pan Flute.\");shouldPlaySound = false;} else {shouldPlaySound = true;sortSticks();ggbReadText(getOrderOfSticksText());}break;}case \"ArrowLeft\":case \"ArrowRight\": {shouldPlaySound = true;reOrderSticks();setArrowIndicatorsVisibility(name.toUpperCase());readMovementText();break;}default:break;}}function getSelectedStick() {return sticks.find(function (stick) {return stick.name === selectedObject.name;});}function getSelectedStickIndex() {for (let i = 0; i < sticks.length; i++) {if (sticks[i].name === selectedObject.name) {return i;}}return -1;}function sortSticks() { update valuesconst previousSticks = [...sticks];sticks.forEach(function (stick) {stick.prevVal = { ...stick }.val;stick.val = ggbObject.getXcoord(stick.point);}); sortsticks.sort(function (first, last) {return first.val - last.val;});return previousSticks;}function setAppletStatus() {let appletStatus = \"A Pan Flute. \";appletStatus += getOrderOfSticksText();ggbObject.setTextValue(\"AAppletStatus\", \"\\\\text{\" + appletStatus + \"}\");return appletStatus;}function getOrderOfSticksText() {const text =\"The sticks of the Pan Flute are in the following order: \" +getLabels() +\".\";return text;}function getNotes() {const notes = sticks.map(function (stick) {return stick.note;});return notes.join(\", \");}function getLabels() {const labels = sticks.map(function (stick) {return stick.label;});return labels.join(\", \");}function playFullPanFlute() {if (!isTonePlaying) {playOscFullPanFlute();} else {if (osc) {osc.stop();}playOscFullPanFlute();}}function playOscFullPanFlute() {osc = audioCtx.createOscillator();osc.type = \"sine\";const timeStarted = audioCtx.currentTime;osc.frequency.setValueAtTime(sticks[0].frequency, timeStarted);const envelope = audioCtx.createGain();envelope.connect(audioCtx.destination);envelope.gain.linearRampToValueAtTime(1, timeStarted + 0.1);envelope.gain.linearRampToValueAtTime(0, timeStarted + 2);for (let i = 0, counter = 0; i < sticks.length; i++, counter += 0.25) {const stick = sticks[i];osc.frequency.setValueAtTime(stick.frequency, timeStarted + counter);}osc.connect(envelope);osc.connect(audioCtx.destination);osc.start();osc.stop(timeStarted + 2);isTonePlaying = true;osc.onended = function () {isTonePlaying = false;};}function playSingleFlute(stick) {if (!isTonePlaying) {playOscSingleFlute(stick);} else {if (osc) {osc.stop();}playOscSingleFlute(stick);}}function playOscSingleFlute(stick) {osc = audioCtx.createOscillator();osc.type = \"sine\";const timeStarted = audioCtx.currentTime;osc.frequency.setValueAtTime(stick.frequency, timeStarted);const envelope = audioCtx.createGain();envelope.connect(audioCtx.destination);osc.frequency.setValueAtTime(stick.frequency, timeStarted);osc.connect(envelope);osc.connect(audioCtx.destination);osc.start();osc.stop(timeStarted + 0.25);isTonePlaying = true;osc.onended = function () {isTonePlaying = false;};}function readMovementText() {const selectedStick = getSelectedStick();const selectedStickIndex = getSelectedStickIndex();const previousStickIndex = selectedStickIndex - 1;const nextStickIndex = selectedStickIndex + 1;let text = \"\";if (previousStickIndex < 0) {text +=\" The \" +selectedStick.label +\" is in the first spot of the Pan Flute.\";} else if (nextStickIndex >= sticks.length) {text +=\" The \" +selectedStick.label +\" is in the last spot of the Pan Flute.\";} else {const previousStick=sticks[previousStickIndex];const nextStick=sticks[nextStickIndex];text +=\" The \" +selectedStick.label +\" moved between the \" +previousStick.label +\" and the \" +nextStick.label +\".\";}text +=\" Press space to hear the sound from the stick. Press space a second time to hear the order of the sticks in the Pan Flute.\";ggbReadText(text);}function reOrderSticks() {const previousSticks = sortSticks(); swap sticksconst selectedStick = getSelectedStick();const prevX = selectedStick.prevVal;const currentX = selectedStick.val;const filteredSticks = sticks.filter(function (stick) {return stick !== selectedStick;});const overlappingStick = filteredSticks.find(function (stick) {return stick.val === currentX;});if (overlappingStick !== undefined) {const overlappingStickIndex = filteredSticks.findIndex(function (stick) {return stick === overlappingStick;});const selectedStickIndex = previousSticks.findIndex(function (stick) {return stick.name === selectedStick.name;}); stick moved to the leftif (prevX > currentX) { overlapping stick should move to the rightfor (let i = overlappingStickIndex; i < selectedStickIndex; i++) {const stick = filteredSticks[i];ggbObject.setCoords(stick.point, stick.val + 1, panFluteTopY);}} else {for (let i = selectedStickIndex; i <= overlappingStickIndex; i++) {const stick = filteredSticks[i];ggbObject.setCoords(stick.point, stick.val - 1, panFluteTopY);}}}sortSticks();}function setArrowIndicatorsVisibility(stickUpperCase) {stickNames.forEach(function (stick) {leftRight.forEach(function (side) {ggbObject.setVisible(stick.toUpperCase().concat(\"_{\", side, \"}\"),false);});}); show arrow indicatorsconst anchorPointX = ggbObject.getXcoord(stickUpperCase.concat(\"Anchor\"));leftRight.forEach(function (side, sideIndex) {ggbObject.setVisible(stickUpperCase.concat(\"_{\", side, \"}\"),anchorPointX !== minMaxOrigX[sideIndex]);});} add new stuff above this line  });  /** IGNORE BELOW*/  function loadUtils() {function parseJS(JSString) {return Function(\"\" + JSString)();}if (!window.didUtils || !window.didUtils.setupGGB) {return fetch(\"https:cdn.digital.greatminds.org/did-utils/latest/index.js\",{cache: \"no-cache\",}).then(function (response) {return response.text();}).then(function (codingText) {parseJS(codingText);}).then(function () {return window.didUtils.setupGGB;});}return Promise.resolve(window.didUtils.setupGGB);  }}",
                        "keyboardInstructionsConst": "{f1: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f2: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f3: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f4: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f5: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f6: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f7: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",f8: \"Press the left and right arrow keys to move this stick. \\\\\\\\Press space to hear the sound from the stick.\",ggbButton1: ggbObject.getValue(\"ggbButton1Enabled\")? \"Press space to play music.\": unavailableButtonText,ggbButton2: ggbObject.getValue(\"ggbButton2Enabled\")? \"Press space to reset the position of the sticks.\": unavailableButtonText,}"
                    }
                },
                "buttonGroup1": {
                    "buttonGroup1AriaLabel": "",
                    "componentType": "buttongroup",
                    "buttons": {
                        "button0Text": "Gatas",
                        "button1Text": "Perras"
                    }
                },
                "button1": {
                    "button1AriaLabel": "",
                    "componentType": "button",
                    "text": "Haga clic aquí"
                }
            }
        },
        "slide1": {
            "slideNumber": "slide-94fec44d84eb",
            "codingLayer": "console.log(components.table1.data);\r\nconsole.log(components.table2.data);",
            "contents": {
                "categorizing1": {
                    "categorizing1AriaLabel": "",
                    "componentType": "categorization",
                    "items": {
                        "item0Text": "Roja",
                        "item1Text": "Azul",
                        "item2Text": "$1$",
                        "item3Text": "$2$"
                    },
                    "categories": {
                        "category0Text": "Pez",
                        "category1Text": "Quinta"
                    }
                },
                "table1": {
                    "table1AriaLabel": "",
                    "componentType": "table",
                    "columns": {
                        "col0Text": "Independiente",
                        "col1Text": "Dependiente"
                    },
                    "rows": {
                        "row0": { "col0Text": "Edad", "col1Text": "Altura" },
                        "row1": {
                            "col0Text": "Tiempo dedicado a estudiar",
                            "col1Text": "Calificación en el examen"
                        }
                    },
                    "ariaRows": {
                        "row0": {
                            "col0AriaLabel": "Por favor agregue texto",
                            "col1AriaLabel": "Añade texto aquí"
                        },
                        "row1": {
                            "col0AriaLabel": "Por favor agregue texto",
                            "col1AriaLabel": "Por favor agregue texto"
                        }
                    }
                },
                "table2": {
                    "table2AriaLabel": "",
                    "componentType": "complextable",
                    "rows": {
                        "row0": {
                            "col0Text": "Independiente complejo",
                            "col1Text": "Dependiente complejo"
                        },
                        "row1": {
                            "col0Text": "123",
                            "col1Text": "Los gatos tienen 9 vidas."
                        },
                        "row2": { "col0Text": "14", "col1Text": "Pspspspsps" }
                    },
                    "ariaRows": {
                        "row0": {
                            "col0AriaLabel": "Por favor agregue texto",
                            "col1AriaLabel": "Por favor agregue texto"
                        },
                        "row1": {
                            "col0AriaLabel": "Etiqueta esto ahora",
                            "col1AriaLabel": "Por favor agregue texto"
                        },
                        "row2": {
                            "col0AriaLabel": "Por favor agregue texto",
                            "col1AriaLabel": "Por favor agregue texto"
                        }
                    }
                }
            }
        },
        "slide2": {
            "slideNumber": "slide-a6cbda66c1dd",
            "codingLayer": "",
            "contents": {
                "image1": {
                    "image1AriaLabel": "",
                    "componentType": "image",
                    "alt": "Texto alternativo de la recta numérica",
                    "copyright": "El texto de derechos de autor está aquí",
                    "src": "https://cdn.digital.greatminds.org/bynder/EM2-1694/PNG_Web Ready/9EEF9BE4-972D-45C3-99D27C759D326A1A.png"
                },
                "dropdown1": {
                    "dropdown1AriaLabel": "",
                    "componentType": "dropdown",
                    "dropdown": {
                        "dropdown0Text": "Texto de opción número 1",
                        "dropdown1Text": "Texto de opción número 2"
                    },
                    "label": "Etiqueta para la entrada",
                    "placeholder": "El texto del marcador de posición está aquí"
                }
            }
        },
        "slide3": {
            "slideNumber": "slide-b8ffe83772a4",
            "codingLayer": "console.log(components.pdfviewer1.data)",
            "contents": {
                "pdfviewer1": {
                    "pdfviewer1AriaLabel": "",
                    "componentType": "pdfviewer",
                    "id": 28841
                }
            }
        }
    }
}
